# Form implementation generated from reading ui file 'src/app_window.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import os
from pathlib import Path
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QFileDialog

from compression import Compression
from decompression import Decompression
from helpers import get_compression_info


def remove_input_file_suffix(file_path):
    suffix = Path(file_path).suffix
    if suffix == ".huff" or suffix == ".lzw" or suffix == ".h_ad":
        return os.path.splitext(file_path)[0]
    return file_path


class Ui_main_window(object):
    def setupUi(self, main_window):
        main_window.setObjectName("main_window")
        main_window.resize(991, 580)
        self.log_label_field = QtWidgets.QLineEdit(parent=main_window)
        self.log_label_field.setGeometry(QtCore.QRect(10, 330, 971, 241))
        self.log_label_field.setObjectName("log_label_field")
        self.log_label = QtWidgets.QLabel(parent=main_window)
        self.log_label.setGeometry(QtCore.QRect(10, 290, 58, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.log_label.setFont(font)
        self.log_label.setObjectName("log_label")
        self.tabWidget = QtWidgets.QTabWidget(parent=main_window)
        self.tabWidget.setGeometry(QtCore.QRect(10, 10, 971, 261))
        self.tabWidget.setObjectName("tabWidget")
        self.tab_compress = QtWidgets.QWidget()
        self.tab_compress.setObjectName("tab_compress")
        self.btn_compress = QtWidgets.QPushButton(parent=self.tab_compress)
        self.btn_compress.clicked.connect(self.compress_button_action)
        self.btn_compress.setGeometry(QtCore.QRect(10, 130, 261, 41))
        self.btn_compress.setObjectName("btn_compress")
        self.input_file_to_compress_field = QtWidgets.QPlainTextEdit(parent=self.tab_compress)
        self.input_file_to_compress_field.setGeometry(QtCore.QRect(280, 30, 671, 31))
        self.input_file_to_compress_field.setObjectName("input_file_field")
        self.output_file_compressed_field = QtWidgets.QPlainTextEdit(parent=self.tab_compress)
        self.output_file_compressed_field.setGeometry(QtCore.QRect(280, 80, 671, 31))
        self.output_file_compressed_field.setObjectName("output_file_field")
        self.btn_huffman_adaptive = QtWidgets.QRadioButton(parent=self.tab_compress)
        self.btn_huffman_adaptive.setGeometry(QtCore.QRect(20, 80, 131, 22))
        self.btn_huffman_adaptive.setObjectName("btn_huffman_adaptive")
        self.btn_lzw = QtWidgets.QRadioButton(parent=self.tab_compress)
        self.btn_lzw.setGeometry(QtCore.QRect(20, 53, 52, 22))
        self.btn_lzw.setObjectName("btn_lzw")
        self.btn_huffman = QtWidgets.QRadioButton(parent=self.tab_compress)
        self.btn_huffman.setGeometry(QtCore.QRect(20, 26, 78, 22))
        self.btn_huffman.setObjectName("btn_huffman")
        self.btn_huffman.click()
        self.btn_choose_compressed_output_file = QtWidgets.QPushButton(parent=self.tab_compress)
        self.btn_choose_compressed_output_file.setGeometry(QtCore.QRect(190, 80, 80, 31))
        self.btn_choose_compressed_output_file.setObjectName("btn_choose_output_file")
        self.btn_choose_input_file_to_compress = QtWidgets.QPushButton(parent=self.tab_compress)
        self.btn_choose_input_file_to_compress.clicked.connect(self.open_input_file_to_compress_dialog)
        self.btn_choose_input_file_to_compress.setGeometry(QtCore.QRect(190, 30, 80, 31))
        self.btn_choose_input_file_to_compress.setObjectName("btn_choose_input_file")
        self.progress_bar = QtWidgets.QProgressBar(parent=self.tab_compress)
        self.progress_bar.setGeometry(QtCore.QRect(10, 190, 941, 23))
        self.progress_bar.setProperty("value", 24)
        self.progress_bar.setObjectName("progress_bar")
        self.tabWidget.addTab(self.tab_compress, "")
        self.tab_decompress = QtWidgets.QWidget()
        self.tab_decompress.setObjectName("tab_decompress")
        self.output_file_decompressed_field = QtWidgets.QPlainTextEdit(parent=self.tab_decompress)
        self.output_file_decompressed_field.setGeometry(QtCore.QRect(280, 80, 671, 31))
        self.output_file_decompressed_field.setObjectName("output_file_field_2")
        self.btn_choose_input_file_to_decompress = QtWidgets.QPushButton(parent=self.tab_decompress)
        self.btn_choose_input_file_to_decompress.clicked.connect(self.open_input_file_to_decompress_dialog)
        self.btn_choose_input_file_to_decompress.setGeometry(QtCore.QRect(190, 30, 80, 31))
        self.btn_choose_input_file_to_decompress.setObjectName("btn_choose_input_file_2")
        self.btn_choose_decompressed_output_file = QtWidgets.QPushButton(parent=self.tab_decompress)
        self.btn_choose_decompressed_output_file.setGeometry(QtCore.QRect(190, 80, 80, 31))
        self.btn_choose_decompressed_output_file.setObjectName("btn_choose_output_file_2")
        self.input_file_to_decompress_field = QtWidgets.QPlainTextEdit(parent=self.tab_decompress)
        self.input_file_to_decompress_field.setGeometry(QtCore.QRect(280, 30, 671, 31))
        self.input_file_to_decompress_field.setObjectName("input_file_field_2")
        self.btn_decompress = QtWidgets.QPushButton(parent=self.tab_decompress)
        self.btn_decompress.clicked.connect(self.decompress_button_action)
        self.btn_decompress.setGeometry(QtCore.QRect(10, 130, 261, 41))
        self.btn_decompress.setObjectName("btn_decompress")
        self.progress_bar_2 = QtWidgets.QProgressBar(parent=self.tab_decompress)
        self.progress_bar_2.setGeometry(QtCore.QRect(10, 190, 941, 23))
        self.progress_bar_2.setProperty("value", 24)
        self.progress_bar_2.setObjectName("progress_bar_2")
        self.tabWidget.addTab(self.tab_decompress, "")

        self.retranslateUi(main_window)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(main_window)

    def retranslateUi(self, main_window):
        _translate = QtCore.QCoreApplication.translate
        main_window.setWindowTitle(_translate("main_window", "File Compressor"))
        self.log_label.setText(_translate("main_window", "Log"))
        self.btn_compress.setText(_translate("main_window", "Compress"))
        self.btn_huffman_adaptive.setText(_translate("main_window", "Huffman Adaptive"))
        self.btn_lzw.setText(_translate("main_window", "LZW"))
        self.btn_huffman.setText(_translate("main_window", "Huffman"))
        self.btn_choose_compressed_output_file.setText(_translate("main_window", "Choose file"))
        self.btn_choose_input_file_to_compress.setText(_translate("main_window", "Choose file"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_compress), _translate("main_window", "Compress"))
        self.btn_choose_input_file_to_decompress.setText(_translate("main_window", "Choose file"))
        self.btn_choose_decompressed_output_file.setText(_translate("main_window", "Choose file"))
        self.btn_decompress.setText(_translate("main_window", "Decompress"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_decompress), _translate("main_window", "Decompress"))

    def open_input_file_to_compress_dialog(self):
        if self.btn_huffman_adaptive.isChecked():
            checked_button = self.btn_huffman_adaptive
        elif self.btn_huffman.isChecked():
            checked_button = self.btn_huffman
        elif self.btn_lzw.isChecked():
            checked_button = self.btn_lzw
        else:
            raise Exception('None button is clicked!')
        # print("Selected: ", checked_button.objectName())

        home_dir = str(Path.home())
        fname = QFileDialog.getOpenFileName(main_window, 'Open file', home_dir)
        output_file_suffix = ".huff"
        if checked_button == self.btn_huffman_adaptive:
            output_file_suffix = ".h_ad"
        elif checked_button == self.btn_lzw:
            output_file_suffix = ".lzw"

        if fname[0]:
            self.input_file_to_compress_field.setPlainText(fname[0])
            self.output_file_compressed_field.setPlainText(fname[0] + output_file_suffix)

    def open_input_file_to_decompress_dialog(self):
        home_dir = str(Path.home())
        fname = QFileDialog.getOpenFileName(main_window, 'Open file', home_dir)

        output_file_suffix = ".txt"
        output_file_path = remove_input_file_suffix(fname[0]) + output_file_suffix

        if fname[0]:
            self.input_file_to_decompress_field.setPlainText(fname[0])
            self.output_file_decompressed_field.setPlainText(output_file_path)

    def compress_button_action(self):
        source_path = self.input_file_to_compress_field.toPlainText()
        dest_path = self.output_file_compressed_field.toPlainText()

        if source_path == '' or dest_path == '':
            return
        b = self.check_clicked_button_to_compress_method()
        if b == self.btn_huffman:
            method = "huffman"
        elif b == self.btn_huffman_adaptive:
            method = "huffman_adaptive"
        else:
            method = "lzw"

        if method == "huffman":
            c = Compression()
            c.compress(source_path, dest_path)
            get_compression_info(source_path, dest_path)

    def decompress_button_action(self):
        source_path = self.input_file_to_decompress_field.toPlainText()
        dest_path = self.output_file_decompressed_field.toPlainText()
        print(source_path)
        print(dest_path)
        if source_path == '' or dest_path == '':
            return
        method = "huffman"
        if method == "huffman":
            d = Decompression()
            d.decompress(source_path, dest_path)
            get_compression_info(dest_path, source_path)

    def check_clicked_button_to_compress_method(self):
        if self.btn_huffman_adaptive.isChecked():
            return self.btn_huffman_adaptive
        elif self.btn_huffman.isChecked():
            return self.btn_huffman
        elif self.btn_lzw.isChecked():
            return self.btn_lzw
        else:
            raise Exception('None button is clicked!')


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    main_window = QtWidgets.QWidget()
    ui = Ui_main_window()
    ui.setupUi(main_window)
    main_window.show()
    sys.exit(app.exec())
