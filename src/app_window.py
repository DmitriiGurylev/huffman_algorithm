# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'graphics/app_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from pathlib import Path

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QFileDialog

from compression import Compression
from helpers import get_compression_info


class Ui_main_window(object):
    def setupUi(self, main_window):
        main_window.setObjectName("main_window")
        main_window.resize(991, 580)
        self.progress_bar = QtWidgets.QProgressBar(main_window)
        self.progress_bar.setGeometry(QtCore.QRect(20, 200, 951, 23))
        self.progress_bar.setProperty("value", 24)
        self.progress_bar.setObjectName("progress_bar")
        self.btn_compress = QtWidgets.QPushButton(main_window)
        self.btn_compress.clicked.connect(self.compress_button_action)
        self.btn_compress.setGeometry(QtCore.QRect(200, 140, 81, 41))
        self.btn_compress.setObjectName("btn_compress")
        self.btn_lzw = QtWidgets.QRadioButton(main_window)
        self.btn_lzw.setGeometry(QtCore.QRect(20, 70, 52, 22))
        self.btn_lzw.setObjectName("btn_lzw")
        self.btn_huffman = QtWidgets.QRadioButton(main_window)
        self.btn_huffman.setGeometry(QtCore.QRect(20, 43, 78, 22))
        self.btn_huffman.setObjectName("btn_huffman")
        self.btn_huffman.click()
        self.log_label_field = QtWidgets.QLineEdit(main_window)
        self.log_label_field.setGeometry(QtCore.QRect(20, 270, 951, 291))
        self.log_label_field.setObjectName("log_label_field")
        self.log_label = QtWidgets.QLabel(main_window)
        self.log_label.setGeometry(QtCore.QRect(20, 234, 58, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.log_label.setFont(font)
        self.log_label.setObjectName("log_label")
        self.btn_choose_input_file = QtWidgets.QPushButton(main_window)

        # self.btn_choose_input_file.setText("Open file dialog")
        self.btn_choose_input_file.clicked.connect(self.open_file_input_dialog)

        self.btn_choose_input_file.setGeometry(QtCore.QRect(200, 40, 80, 31))
        self.btn_choose_input_file.setObjectName("btn_choose_input_file")
        self.btn_choose_output_file = QtWidgets.QPushButton(main_window)
        self.btn_choose_output_file.setGeometry(QtCore.QRect(200, 90, 80, 31))
        self.btn_choose_output_file.setObjectName("btn_choose_output_file")
        self.input_file_field = QtWidgets.QPlainTextEdit(main_window)
        self.input_file_field.setGeometry(QtCore.QRect(300, 40, 671, 31))
        self.input_file_field.setObjectName("input_file_field")
        self.output_file_field = QtWidgets.QPlainTextEdit(main_window)
        self.output_file_field.setGeometry(QtCore.QRect(300, 90, 671, 31))
        self.output_file_field.setObjectName("output_file_field")
        self.btn_huffman_adaptive = QtWidgets.QRadioButton(main_window)
        self.btn_huffman_adaptive.setGeometry(QtCore.QRect(20, 97, 131, 22))
        self.btn_huffman_adaptive.setObjectName("btn_huffman_adaptive")

        self.retranslateUi(main_window)
        QtCore.QMetaObject.connectSlotsByName(main_window)

    def retranslateUi(self, main_window):
        _translate = QtCore.QCoreApplication.translate
        main_window.setWindowTitle(_translate("main_window", "File Compressor"))
        self.btn_compress.setText(_translate("main_window", "Compress"))
        self.btn_lzw.setText(_translate("main_window", "LZW"))
        self.btn_huffman.setText(_translate("main_window", "Huffman"))
        self.log_label.setText(_translate("main_window", "Log"))
        self.btn_choose_input_file.setText(_translate("main_window", "Choose file"))
        self.btn_choose_output_file.setText(_translate("main_window", "Choose file"))
        self.btn_huffman_adaptive.setText(_translate("main_window", "Huffman Adaptive"))

    def open_file_input_dialog(self):
        if self.btn_huffman_adaptive.isChecked():
            checked_button = self.btn_huffman_adaptive
        elif self.btn_huffman.isChecked():
            checked_button = self.btn_huffman
        elif self.btn_lzw.isChecked():
            checked_button = self.btn_lzw
        else:
            raise Exception('None button is clicked!')
        # print("Selected: ", checked_button.objectName())

        home_dir = str(Path.home())
        fname = QFileDialog.getOpenFileName(main_window, 'Open file', home_dir)
        outpur_file_postfix = ".huff"
        if checked_button == self.btn_huffman_adaptive:
            outpur_file_postfix = ".hadapt"
        elif checked_button == self.btn_lzw:
            outpur_file_postfix = ".lzw"

        if fname[0]:
            self.input_file_field.setPlainText(fname[0])
            self.output_file_field.setPlainText(fname[0] + outpur_file_postfix)

    def compress_button_action(self):
        source_path = self.input_file_field.toPlainText()
        dest_path = self.output_file_field.toPlainText()

        if source_path == '' or dest_path == '':
            return
        b = self.check_clicked_buttom_method()
        if b == self.btn_huffman:
            method = "huffman"
        elif b == self.btn_huffman_adaptive:
            method = "huffman_adaptive"
        else:
            method = "lzw"

        if method == "huffman":
            c = Compression()
            c.compress(source_path, dest_path)
            get_compression_info(source_path, dest_path)

    def check_clicked_buttom_method(self):
        if self.btn_huffman_adaptive.isChecked():
            return self.btn_huffman_adaptive
        elif self.btn_huffman.isChecked():
            return self.btn_huffman
        elif self.btn_lzw.isChecked():
            return self.btn_lzw
        else:
            raise Exception('None button is clicked!')


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    main_window = QtWidgets.QWidget()
    ui = Ui_main_window()
    ui.setupUi(main_window)
    main_window.show()
    sys.exit(app.exec())
